import libs/ascii as ascii
import libs/sprites as sprites
import libs/palette as p

pre COLOR_TABLE = (153 << 8)
pre COLOR = 255 | (255 << 8) | (255 << 16)
pre PIXELXY = 10 | (10 << 8)

pre COLOR_INDEX = 1
pre POS_0 = 32 | (12 << 8)

rom string[] = "I now have *simple* working sprite and text graphics"
pre string = $string[0]
pre string1 = $string[0]
pre string2 = $string[0]

ram animationTimer
ram currentSprite
ram currentPosition
pre ANIMATION_TICK = 1

ldr a, 0
str a, animationTimer
str a, currentSprite
ldr a, 16 | (32 << 8)
str a, currentPosition
jsr p.loadColors

main:
  jsr frameStart
  jsr clearFrameFlag
  jsr updateAnimation

  ldr g, string
  ldr h, POS_0
  ldr e, p.BLUE
  ldr f, 0
  jsr drawString


  ldr g, string1
  ldr h, POS_0 + 0x0700
  ldr e, p.GRAY
  ldr f, 0
  jsr drawString

  ldr g, string2
  ldr h, POS_0 + 0x0E00
  ldr e, p.WHITE
  ldr f, 0
  jsr drawString

  jsr animateDownwell
  jmp main
  //jmp stop

stop:
  jmp stop

frameStart:
  ldr h, 0xffff
  lpt a, gpu
  cmp a, 1
  rsc equal
  jmp frameStart

clearFrameFlag:
  ldr h, 0xffff
  ldr g, 0
  spt g, gpu
  rts

updateAnimation:
  ldr a, animationTimer
  add a, 1
  str a, animationTimer
  cmp a, ANIMATION_TICK
  rsc less
  ldr a, 0
  str a, animationTimer
  rts

drawChar:
  pre WIDTH = 3
  pre HEIGHT = 6
  pre INC_Y = 0x0100
  // expects input char in register g,
  // xy pos in h register
  // fg color in e, bg color in f
  // and a 3x6 characters
  mul g, 3            // converting ascii number to table index
  add g, ascii.chars // adding memory offset
  lpt a, rom

  ldr c, 0               // column loop
  ldr d, 0               // row loop

  //sub h, INC_Y           // starting y-1 cause im dumb

  columnLoop:
    cmp c, HEIGHT
    joc equal, rowLoop
    add c, 1             // incrementing column loop
    and a, 1, b
    lsr a, 1
    cmp b, 0
    joc equal, bgcolor // if bitmap bit is zero...
    spt e, gpu
    add h, INC_Y         // incrementing ypos
    jmp columnLoop

    bgcolor:
      spt f, gpu
      add h, INC_Y         // incrementing ypos
      jmp columnLoop


  rowLoop:
    cmp d, WIDTH - 1
    rsc equal // exit subroutine when all columns written
    add d, 1
    add g, 1 // increment rom pointer
    lpt a, rom
    ldr c, 0
    add h, 1 //increment gpu xpos
    sub h, INC_Y*HEIGHT // returning y pos
    jmp columnLoop

drawString:
  // expects starting position in h,
  // string pointer in g, and fg and bg in
  // e and f
  ram tempPtr

  drawStringStart:
    str g, tempPtr
    lpt a, rom
    cmp a, 0
    rsc equal // return when null terminating character reached
    add a, 0, g // transfer character to rom pointer
    jsr drawChar
    add h, 2 // incrementing x by two
    sub h, 0x0100*6
    ldr g, tempPtr
    add g, 1
    jmp drawStringStart

// for sprites <= XXx16 stored in rom
drawSprite:
  pre SPRITE_Y_INC = 0x0100
  ram yxsize
  ram sprite_colors
  // x size, y size, xpos, ypos, fg color, bg color, rom pointer
  // xsize and ysize in a register
  // xpos and ypos in h register
  // fg color and bg color in f register
  // rom pointer in g register of course
  str f, sprite_colors
  str e, yxsize
  ldr c, 0 // y pos
  ldr d, 0 // x pos
  /*
  lpt a, rom // loading sprite pointer in a
  add a, 0, g // transferring to rom pointer register
  */
  lpt a, rom // loading first word into a

  spriteLoop:
    ldr e, yxsize
    and e, 0xff
    cmp c, e
    joc equal, sprite_y_reset
    and a, 1, b
    joc zero, sprite_bg_color
    // otherwise...
    ldr f, sprite_colors
    and f, 0xff
    spt f, gpu
    add h, SPRITE_Y_INC // incrementing y position
    add c, 1 // increment y pos in subroutine
    lsr a, 1 // shifting bitmap word
    jmp spriteLoop

    sprite_bg_color:
      ldr f, sprite_colors
      lsr f, 8
      spt f, gpu
      add h, SPRITE_Y_INC // incrementing y position
      add c, 1 // increment y pos in subroutine
      lsr a, 1 // shifting bitmap word
      jmp spriteLoop

    sprite_y_reset:
      ldr e, yxsize
      lsr e, 8
      cmp d, e // comparing current x position to maximum of sprite
      rsc equal // exit subroutine if all words written
      add d, 1 // otherwise, increment x position
      mul c, SPRITE_Y_INC // multiplying ypos value by height of sprite
      sub h, c
      add g, 1 // incrementing rom pointer
      lpt a, rom
      add h, 1 // incrementing screen x position
      ldr c, 0 // resetting y subroutine position
      jmp spriteLoop

animateDownwell:
  pre SPRITE_STEP = 16
  pre NUM_SPRITES = 15 - 1
  pre WAIT_TIME = 20

  ldr a, animationTimer
  cmp a, 0
  joc equal, draw
  rts

  draw:
    ldr e, 16 | (16 << 8) // y-x sprite size
    ldr f, p.RED // colors
    ldr g, currentSprite
    mul g, SPRITE_STEP
    add g, sprites.downwell
    ldr h, currentPosition
    jsr drawSprite
    ldr a, currentPosition
    add a, 2
    str a, currentPosition

    ldr a, currentSprite
    add a, 1
    cmp a, NUM_SPRITES
    joc equal, reset_sprite_frame
    str a, currentSprite
    rts

    reset_sprite_frame:
      ldr a, 0
      str a, currentSprite
      rts
