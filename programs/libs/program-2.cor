

// non-const pointers need memory type
//ptr ram nutter
//ptr rom nutterr

// const pointers do not need these typings
// const ptr wow = &nut
// const ptr im = &smol

// tfm ROM, RAM
// tfm ROM, GPU
// tfm RAM, GPU
// tfm GPU, RAM

//

// lpt

// loading a pointer should be easy, ie
// ldr nutter // implicit <ldr f, nutter> since nutter is a pointer to ram
// str nutter // same thing here

// typical pointer initialization:
// ptr ram nutty
//
// ldr a, &smol
// str a, nutty

/* ideal types
pre VAL = 20
ram nutt
rom butt = 1

ram ptr nutty
rom ptr butty = &butt
*/

/*
GPU memory should be accesssed through a buffered fifo interface to allow
'simultaneous' reads and writes throughout the frame.
The fifo status can be read by a memory mapped status register in the frame buffer
This also conveniently allows translation between processor and gpu clock domains

The one problem is that buffer reads will be awkward, taking an indeterminate amount
of ti.e to comete.

An alternative is to stall the read and write to gpu instructions until a write can be made.
This will be much easier to interface with for programming, but potentially a bit slower.
I think this ^ is actually the best solution, though.

the refreah rate will be controllable by the clock module, which interfaces with
a (minimum) two output programmable clock chip

Maybe include registers that allow automatic reading of a frame buffer rectangle
*/

// TODO -- need to figure out pointers and arrays for getting that
// display working

//var test
ram test

rom nut = 2
rom butt = 2

pre VAL = 8
pre VAL1 = VAL*2
pre VAL2 = VAL1/3

//pre VAL3 = butt + 1
// this ^ causes weird issues

rom string[] = "Hello world!"

/*
rom stringList[][] = {
  "Let me say this!",
  "or this?",
}
*/
rom bespoke1d[] = {0, 15, 2,
  7, VAL,
  VAL + 1,
}

pre bespoke1d = $bespoke1d[0]
pre string = $string[0]
/*
rom bespoke2d[][] = {
  {1, 2},
  {3, 4},{5, 6},
}
*/
main:
  ldr a, bespoke1d[1]
  str a, test
  ldr b, nut

  ldr c, 0

  add a, b
  lsl a, b

  cmp a, VAL
  joc greater, display

stop:
  jmp stop

display:
  //ldr a, 22
  str a, UART
  lsr a, 8
  str a, UART
  jmp stop
